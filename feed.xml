<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backdesk</title>
    <atom:link href="http://localhost:7777/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:7777</link>
    <description>Digital content done right</description>
    <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Mauris nec erat sit amet dui gravida tristique</title>
      <link>http://localhost:7777/articles/mongoose-populate/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:7777/articles/mongoose-populate/</guid>
      <author></author>
      <description>&lt;p&gt;Mauris nec erat sit amet dui gravida tristique eget sed nisi. In vulputate at nunc in blandit. Phasellus interdum rutrum mi. Fusce at erat non turpis facilisis dignissim sed id ex. Nulla finibus mattis nulla a congue. Nulla mattis pharetra nisi, et hendrerit purus consectetur ac. &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;why-&quot;&gt;Why?&lt;/h3&gt;
&lt;p&gt;A core motivation for running with my own resume is privacy. First of all, it seems like there are limited options on LinkedIn when it comes to controlling what aspects of your profile are visible to the outside world. You either have a public profile or you don’t. In addition to this there doesn’t appear to be a way to block individuals so there’s no preference over who can see my data beyond the public threshold.&lt;/p&gt;
&lt;p&gt;What I would like to be able to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Control who views my resume&lt;/li&gt;
&lt;li&gt;Control and even customize what can be seen on a per user basis&lt;/li&gt;
&lt;li&gt;Have analytics track behavior so I can continuously improve&lt;/li&gt;
&lt;li&gt;Provide an interactive layer (availability, questions etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doesn’t seem like too much to ask for does it?&lt;/p&gt;
&lt;h3 id=&quot;the-stack&quot;&gt;The Stack&lt;/h3&gt;
&lt;p&gt;There’s no better way to boast about your expertise as a developer than to provide potential clients with examples of your work. Since my core focus is JavaScript I’ve chosen the following stack:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;th&gt;Express&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;MongoDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ODM&lt;/td&gt;
&lt;td&gt;Mongoose&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;Backbone/Marionette&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: I will use a combination of Grunt and Webpack for build and deploy.&lt;/p&gt;
&lt;h3 id=&quot;the-data&quot;&gt;The Data&lt;/h3&gt;
&lt;p&gt;LinkedIn provides an API but I’ve not looked at in any great detail. Instead I just quickly needed a sensible JSON structure that contains everything. There are a few tools and formats around to do this. The basic format I’ve chosen is &lt;a href=&quot;https://jsonresume.org/schema/&quot;&gt;jsonresume&lt;/a&gt; and the tool I’m using to get at my data is &lt;a href=&quot;http://jmperezperez.com/linkedin-to-json-resume/&quot;&gt;linkedin to json resume&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This JSON document broken down into collections and stored in MongoDB:&lt;/p&gt;
&lt;p&gt;[[DB DIAGRAM]]&lt;/p&gt;
&lt;p&gt;Note: At this time I’m only looking at work experience and a single resume. So I’ve broken things down into two collections.&lt;/p&gt;
&lt;h3 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;/models
    |__ position.js
    |__ resume.js

/routes
 package.json
 app.js
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Let’s create some Schemas for those two collections:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/james-gardner/5b2e6fd414fe696f7c36.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Note: Mongoose will look for a collection with a pluralized name unless told otherwise. So in MongoDB the collections will
be referred to as ‘positions’ and ‘resumes’.&lt;/p&gt;
&lt;p&gt;Since we don’t have any CRUD in place yet you will need some &lt;a href=&quot;https://gist.github.com/james-gardner/d28525e9c51d4896d2cd&quot;&gt;dummy data&lt;/a&gt; waiting in mongo.&lt;/p&gt;
&lt;p&gt;I’m defining one main GET to retrive the entire resume:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/james-gardner/e33415d7f3cb7bc9153f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Note: In the near future there will be multiple versions of my resume so this method will have to support querying them by a common parameter.&lt;/p&gt;
&lt;p&gt;The resume document is populated with with any corresponding position documents.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wrapping 'window.console'</title>
      <link>http://localhost:7777/articles/wrapping-console/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:7777/articles/wrapping-console/</guid>
      <author></author>
      <description>&lt;p&gt;I try and keep console usage like ‘.log’ to a minimum and use breakpoints where possible. There are lots of other useful console methods available to us but I would like to be able to be able to toggle those on and off.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;the-code&quot;&gt;The Code&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/james-gardner/e6bc873d08a586c7d17b.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;review-and-conclusion&quot;&gt;Review and Conclusion&lt;/h3&gt;
&lt;p&gt;Ut varius orci quis ex facilisis, et convallis sem sodales. Praesent ultricies, eros condimentum bibendum luctus, est purus commodo enim, nec lacinia est nulla ut ipsum. Fusce vulputate scelerisque neque, vel ultricies nisl scelerisque a. Donec convallis laoreet ipsum id pharetra. Pellentesque ac dui in ante pulvinar sodales ullamcorper sed velit. Donec finibus commodo elit, a eleifend magna ultricies non. Morbi ultricies sollicitudin libero, a luctus nisi scelerisque sed. Etiam accumsan mauris at velit faucibus, egestas consequat lacus posuere. Praesent feugiat volutpat sapien, in sodales lorem luctus vehicula.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Using Backbone with Webpack</title>
      <link>http://localhost:7777/articles/backbone-webpack/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:7777/articles/backbone-webpack/</guid>
      <author></author>
      <description>&lt;p&gt;This is a very short guide demonstrating how to structure an application using Backbone and Webpack.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;You can skip this part if you’re already familiar with installing packages using NPM and alternatively if you just want the package.json file you can find it &lt;a href=&quot;https://gist.github.com/james-gardner/e78d64453f30fc27ff49&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first thing I’m going to do is create a package.json file. Create a new folder called ‘boilerplate’ and open it within a terminal.&lt;/p&gt;
&lt;p&gt;Type the following command (you can accept the default options):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we’ll start bringing in the dependencies we need for our stack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install --save-dev jquery underscore backbone webpack grunt
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;app.js - main entry point
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;setting-up-webpack&quot;&gt;Setting up Webpack&lt;/h3&gt;
&lt;p&gt;As mentioned I will be using Webpack to bundle the JavaScript assets for the client application. The bundled assets (main.min.js) will eventually be served from a local webserver. Webpack can package up other assets like templates and stylesheets as well.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/james-gardner/4b13090baccb3649d65e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Note|: We could bring the various dependencies like underscore and backbone in through a CDN. In this example I’m keeping everything inclusive.&lt;/p&gt;
&lt;h3 id=&quot;getting-to-work&quot;&gt;Getting to Work&lt;/h3&gt;
&lt;p&gt;Let’s start with a basic view and template that we’ll use later on.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/james-gardner/34a6512a2d944a5abcf9.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;templates&quot;&gt;Templates&lt;/h3&gt;
&lt;p&gt;In the above example I require’d a template into my view. There are a number of different template engines I could use but I’ve chosen to stick with underscore for this example. By default webpack will assume your require’d resource to be JavaScript unless told otherwise. This is where loaders come in. We need something to tell webpack that our html resources should be treated as underscore templates.&lt;/p&gt;
&lt;p&gt;We can build in support for underscore templates by installing a specialized loader:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install --save-dev underscore-template-loader
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then adding the following to the webpack.config.js file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module: {
    loaders: [
        { test: /\.html$/, loader: &amp;#39;underscore-template-loader&amp;#39; }
    ]
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this example my uber-simple template comprises of a single H1 and paragraph:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/james-gardner/b1cd73c23285b95b759c.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/h3&gt;
&lt;p&gt;If you cast your eye back to the webpack.config.js file you will see the ‘entry’ property which is used to point Webpack at an applications entry point. I’ve set app.js to be the main entry point and I’m going to set up a quick and dirty Backbone.Router within there. The router only has one default route which cranks up the view we just created.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/james-gardner/b55306e31d0dc70d49f2.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;stylesheets&quot;&gt;Stylesheets&lt;/h3&gt;
&lt;h3 id=&quot;production&quot;&gt;Production&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ webpack -p (uglify kicks in by default)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;further-reading-and-useful-links&quot;&gt;Further Reading and Useful Links&lt;/h3&gt;
&lt;!--
* http://web-design-weekly.com/2014/09/24/diving-webpack/
* http://stackoverflow.com/questions/23305599/webpack-provideplugin-vs-externals
* http://stackoverflow.com/questions/24311282/grunt-webpack-globals-via-provideplugin
* http://cuttleblog.tumblr.com/post/63669845272/webpack
--&gt;</description>
    </item>
    <item>
      <title>Backbone - A Refresher</title>
      <link>http://localhost:7777/articles/backbone-refresher/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://localhost:7777/articles/backbone-refresher/</guid>
      <author></author>
      <description>&lt;p&gt;I haven’t been actively using Backbone for a couple of months now.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;the-nature-of-backbone&quot;&gt;The Nature of Backbone&lt;/h3&gt;
&lt;p&gt;Out of the box Backbone is an unopinionated library for bringing structure to an application. It provides you with data-modelling, bare-bone views and a router. That’s probably all you’re going to need for a small and simple application.&lt;/p&gt;
&lt;p&gt;It’s unopinionated because it’s intended to be used as a foundation library rather than a framework.&lt;/p&gt;
&lt;h3 id=&quot;use-promises&quot;&gt;Use Promises&lt;/h3&gt;
&lt;p&gt;Even if jQuery’s deferred objects aren’t A+ they’re still extremely useful in Backbone.&lt;/p&gt;
&lt;p&gt;   model.save().then(success, failure)&lt;/p&gt;
&lt;p&gt;There’s nothing stopping you from adopting a different promise library. The point I wish to make is that it’s easy to get sucked into using events like ‘sync’ or callbacks and not seeing the light of day for a while.&lt;/p&gt;
&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt;
&lt;h3 id=&quot;boilerplates&quot;&gt;Boilerplates&lt;/h3&gt;
&lt;h3 id=&quot;marionette&quot;&gt;Marionette&lt;/h3&gt;
&lt;h3 id=&quot;thorax&quot;&gt;Thorax&lt;/h3&gt;
&lt;h3 id=&quot;chaplin&quot;&gt;Chaplin&lt;/h3&gt;
&lt;p&gt;I would greet Chaplin with more enthusiasm if it weren’t for the fact that their source is written in CoffeeScript.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>